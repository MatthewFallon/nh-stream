name: Build for Netlify



on:
  push:
    branches:
      - main

jobs:
  pdfbuild:
    runs-on: ubuntu-latest
    container: matthewfallon/eisvogel
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - run: arr=(index power-on jobs computer cheatsheet)
    - name: Build PDFs
      run: 	|
        for each in "${arr[@]}"; do
          pandoc --data-dir=/var/lib/pandoc --template=eisvogel.latex --pdf-engine=xelatex --from markdown+yaml_metadata_block+smart+backtick_code_blocks+grid_tables --to pdf -o "nhstream-$each.pdf" "$each.md"
        done
    - name: Upload PDF Partials
      uses: actions/upload-artifact@v4
      with: 
        name: pdf-partials
        path: nhstream-*.pdf
  
  pdfmerge:
    runs-on: ubuntu-latest
    container: pdftk/pdftk:3.3.3
    steps:
    - name: Download PDF Partials
      uses: actions/download-artifact@v4
      with:
        name: pdf-partials
    - run: arr=(index power-on jobs computer cheatsheet)
    - name: Combine PDFs
      run: pdftk $(printf "nhstream-%s.pdf " "${arr[@]}") cat output nhstream.pdf
    - name: Upload PDF
      uses: actions/upload-artifact@v4
      with:
        name: pdf-output
        path: nhstream.pdf

  jekyllbuild:
    runs-on: ubuntu-latest
    needs: pdfbuild
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3' # Not needed with a .ruby-version file
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
    - name: Download PDF
      uses: actions/download-artifact@v4
      with:
        name: pdf-output
    - name: Build Jekyll Site
      run: bundle exec jekyll build
    - name: Deploy to Netlify
      uses: jsmrcaga/action-netlify-deploy@v2.4.0
      with:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_DEPLOY_MESSAGE: "Deployed from GitHub action"
        NETLIFY_DEPLOY_TO_PROD: true
        build_directory: _site
        install_command: "echo Skipping installing the dependencies"
        build_command: "echo Skipping building the web files"
